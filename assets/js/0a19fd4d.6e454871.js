"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[596],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=s(n),m=a,c=k["".concat(p,".").concat(m)]||k[m]||u[m]||r;return n?i.createElement(c,l(l({ref:t},d),{},{components:n})):i.createElement(c,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4780:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={},p="Redis Sink",s={unversionedId:"sinks/redis-sink",id:"sinks/redis-sink",title:"Redis Sink",description:"A Redis sink Firehose \\(SINK_TYPE=redis\\) requires the following variables to be set along with Generic ones",source:"@site/docs/sinks/redis-sink.md",sourceDirName:"sinks",slug:"/sinks/redis-sink",permalink:"/firehose/sinks/redis-sink",draft:!1,editUrl:"https://github.com/odpf/firehose/edit/master/docs/docs/sinks/redis-sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Prometheus Sink",permalink:"/firehose/sinks/prometheus-sink"},next:{title:"Blob Sink",permalink:"/firehose/sinks/blob-sink"}},d={},u=[{value:"<code>SINK_REDIS_URLS</code>",id:"sink_redis_urls",level:2},{value:"<code>SINK_REDIS_DATA_TYPE</code>",id:"sink_redis_data_type",level:2},{value:"<code>SINK_REDIS_KEY_TEMPLATE</code>",id:"sink_redis_key_template",level:2},{value:"<code>INPUT_SCHEMA_PROTO_TO_COLUMN_MAPPING</code>",id:"input_schema_proto_to_column_mapping",level:2},{value:"<code>SINK_REDIS_LIST_DATA_PROTO_INDEX</code>",id:"sink_redis_list_data_proto_index",level:2},{value:"<code>SINK_REDIS_KEY_VALUE_DATA_PROTO_INDEX</code>",id:"sink_redis_key_value_data_proto_index",level:3},{value:"<code>SINK_REDIS_TTL_TYPE</code>",id:"sink_redis_ttl_type",level:2},{value:"<code>SINK_REDIS_TTL_VALUE</code>",id:"sink_redis_ttl_value",level:2},{value:"<code>SINK_REDIS_DEPLOYMENT_TYPE</code>",id:"sink_redis_deployment_type",level:2}],k={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"redis-sink"},"Redis Sink"),(0,r.kt)("p",null,"A Redis sink Firehose ","(",(0,r.kt)("inlineCode",{parentName:"p"},"SINK_TYPE"),"=",(0,r.kt)("inlineCode",{parentName:"p"},"redis"),")"," requires the following variables to be set along with Generic ones"),(0,r.kt)("h2",{id:"sink_redis_urls"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_URLS")),(0,r.kt)("p",null,"REDIS instance hostname/IP address followed by its port."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},"localhos:6379,localhost:6380")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"required"))),(0,r.kt)("h2",{id:"sink_redis_data_type"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_DATA_TYPE")),(0,r.kt)("p",null,"To select whether you want to push your data as a HashSet or as a List."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},"Hashset")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"required")),(0,r.kt)("li",{parentName:"ul"},"Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"List"))),(0,r.kt)("h2",{id:"sink_redis_key_template"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_KEY_TEMPLATE")),(0,r.kt)("p",null,"The string that will act as the key for each Redis entry. This key can be configured as per the requirement, a constant or can extract value from each message and use that as the Redis key."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"p"},"Service\\_%%s,1")),(0,r.kt)("p",{parentName:"li"},"This will take the value with index 1 from proto and create the Redis keys as per the template\\")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"required")))),(0,r.kt)("h2",{id:"input_schema_proto_to_column_mapping"},(0,r.kt)("inlineCode",{parentName:"h2"},"INPUT_SCHEMA_PROTO_TO_COLUMN_MAPPING")),(0,r.kt)("p",null,"This is the field that decides what all data will be stored in the HashSet for each message."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},'{"6":"customer_id",  "2":"order_num"}')),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"required (For Hashset)"))),(0,r.kt)("h2",{id:"sink_redis_list_data_proto_index"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_LIST_DATA_PROTO_INDEX")),(0,r.kt)("p",null,"This field decides what all data will be stored in the List for each message."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"p"},"6")),(0,r.kt)("p",{parentName:"li"},"This will get the value of the field with index 6 in your proto and push that to the Redis list with the corresponding keyTemplate\\")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"required (For List)")))),(0,r.kt)("h3",{id:"sink_redis_key_value_data_proto_index"},(0,r.kt)("inlineCode",{parentName:"h3"},"SINK_REDIS_KEY_VALUE_DATA_PROTO_INDEX")),(0,r.kt)("p",null,"This field decides what data will be stored in the value part of key-value pair"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"p"},"6")),(0,r.kt)("p",{parentName:"li"},"This will get the value of the field with index 6 in your proto and push that to the Redis as value with the corresponding keyTemplate\\")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"required (For KeyValue)")))),(0,r.kt)("h2",{id:"sink_redis_ttl_type"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_TTL_TYPE")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},"DURATION")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"optional")),(0,r.kt)("li",{parentName:"ul"},"Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"DISABLE")),(0,r.kt)("li",{parentName:"ul"},"Choice of Redis TTL type.It can be:\\",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DURATION"),": After which the Key will be expired and removed from Redis ","(","UNIT- seconds",")","\\"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXACT_TIME"),": Precise UNIX timestamp after which the Key will be expired")))),(0,r.kt)("h2",{id:"sink_redis_ttl_value"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_TTL_VALUE")),(0,r.kt)("p",null,"Redis TTL value in Unix Timestamp for ",(0,r.kt)("inlineCode",{parentName:"p"},"EXACT_TIME")," TTL type, In Seconds for ",(0,r.kt)("inlineCode",{parentName:"p"},"DURATION")," TTL type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},"100000")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"optional")),(0,r.kt)("li",{parentName:"ul"},"Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"0"))),(0,r.kt)("h2",{id:"sink_redis_deployment_type"},(0,r.kt)("inlineCode",{parentName:"h2"},"SINK_REDIS_DEPLOYMENT_TYPE")),(0,r.kt)("p",null,"The Redis deployment you are using. At present, we support ",(0,r.kt)("inlineCode",{parentName:"p"},"Standalone")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Cluster")," types."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example value: ",(0,r.kt)("inlineCode",{parentName:"li"},"Standalone")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"required")),(0,r.kt)("li",{parentName:"ul"},"Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"Standalone"))))}m.isMDXComponent=!0}}]);