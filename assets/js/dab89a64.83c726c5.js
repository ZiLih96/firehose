"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[854],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var f=a.createContext({}),l=function(e){var t=a.useContext(f),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(f.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,f=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(n),u=o,d=p["".concat(f,".").concat(u)]||p[u]||m[u]||r;return n?a.createElement(d,s(s({ref:t},c),{},{components:n})):a.createElement(d,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var f in t)hasOwnProperty.call(t,f)&&(i[f]=t[f]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8578:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return f},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),s=["components"],i={},f="Offset manager",l={unversionedId:"concepts/offsets",id:"concepts/offsets",title:"Offset manager",description:"Every kafka message has an incremental offset. Kafka API has method to commit offsets given as arguments. If a larger",source:"@site/docs/concepts/offsets.md",sourceDirName:"concepts",slug:"/concepts/offsets",permalink:"/firehose/concepts/offsets",draft:!1,editUrl:"https://github.com/odpf/firehose/edit/master/docs/docs/concepts/offsets.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Decorators",permalink:"/firehose/concepts/decorators"},next:{title:"Monitoring",permalink:"/firehose/concepts/monitoring"}},c={},m=[{value:"Adding offsets",id:"adding-offsets",level:3},{value:"Setting a batch to be Committable.",id:"setting-a-batch-to-be-committable",level:3},{value:"Getting Committable offsets",id:"getting-committable-offsets",level:3}],p={toc:m};function u(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"offset-manager"},"Offset manager"),(0,r.kt)("p",null,"Every kafka message has an incremental offset. Kafka API has method to commit offsets given as arguments. If a larger\noffset is committed, lower offsets are considered to be automatically committed."),(0,r.kt)("p",null,"Offset manager is a data structure which calculates committable offsets for each partition.\nTo use offset manager:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"add message(s) with metadata about offset and partition with a batch key.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"add offsets into a sorted map with committable flag to be false."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addOffsetToBatch(Object batch, List<Message> messages)")))),(0,r.kt)("li",{parentName:"ul"},"set messages to be committable once the processing is finished.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setCommittable(Object batch)")," to set the committable flag to be true."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getCommittableOffset()")," returns the largest offset that can be committed.")),(0,r.kt)("p",null,"##Implementation\n###Data Structures"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OffsetNode: A combination of topic, partition and the offset."),(0,r.kt)("li",{parentName:"ul"},"toBeCommittableBatchOffsets: A map of batch-keys and a set of OffsetNodes."),(0,r.kt)("li",{parentName:"ul"},"sortedOffsets: A map of topic-partition to a sorted list of OffsetNode.")),(0,r.kt)("h3",{id:"adding-offsets"},"Adding offsets"),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"addOffsetToBatch(Object batch, List<Message> messages)")," is called, it creates a OffsetNode from the message.\nEach Topic-Partition has a sorted list by offsets. The OffsetNode is added into this sorted list.\nOffsetNode is also added into the map keyed by provided key."),(0,r.kt)("h3",{id:"setting-a-batch-to-be-committable"},"Setting a batch to be Committable."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setCommittable(Object batch)")," sets a flag ",(0,r.kt)("inlineCode",{parentName:"p"},"isCommittable")," to be true on each\nOffsetNode on the batch. It also removes from the map ",(0,r.kt)("inlineCode",{parentName:"p"},"toBeCommittableBatchOffsets"),"."),(0,r.kt)("h3",{id:"getting-committable-offsets"},"Getting Committable offsets"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getCommittableOffset()")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For each topic-partition:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Look for the contiguous offsets in the sorted list which are set to be committed."),(0,r.kt)("li",{parentName:"ul"},"Return the largest offset from the contiguous series."),(0,r.kt)("li",{parentName:"ul"},"Delete smaller OffsetNodes from the sorted list.")))))}u.isMDXComponent=!0}}]);