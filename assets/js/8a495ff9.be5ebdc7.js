"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[106],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return _}});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),_=l,m=d["".concat(s,".").concat(_)]||d[_]||c[_]||a;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function _(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1806:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return _},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var i=n(7462),l=n(3366),a=(n(7294),n(3905)),r=["components"],o={},s="ElasticSearch Sink",u={unversionedId:"sinks/elasticsearch-sink",id:"sinks/elasticsearch-sink",title:"ElasticSearch Sink",description:"An ES sink Firehose \\(SINK_TYPE=elasticsearch\\) requires the following variables to be set along with Generic ones",source:"@site/docs/sinks/elasticsearch-sink.md",sourceDirName:"sinks",slug:"/sinks/elasticsearch-sink",permalink:"/firehose/sinks/elasticsearch-sink",draft:!1,editUrl:"https://github.com/odpf/firehose/edit/master/docs/docs/sinks/elasticsearch-sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Retries",permalink:"/firehose/sinks/retries"},next:{title:"GRPC Sink",permalink:"/firehose/sinks/grpc-sink"}},p={},c=[{value:"<code>SINK_ES_CONNECTION_URLS</code>",id:"sink_es_connection_urls",level:2},{value:"<code>SINK_ES_INDEX_NAME</code>",id:"sink_es_index_name",level:2},{value:"<code>SINK_ES_TYPE_NAME</code>",id:"sink_es_type_name",level:2},{value:"<code>SINK_ES_ID_FIELD</code>",id:"sink_es_id_field",level:2},{value:"<code>SINK_ES_MODE_UPDATE_ONLY_ENABLE</code>",id:"sink_es_mode_update_only_enable",level:2},{value:"<code>SINK_ES_INPUT_MESSAGE_TYPE</code>",id:"sink_es_input_message_type",level:2},{value:"<code>SINK_ES_PRESERVE_PROTO_FIELD_NAMES_ENABLE</code>",id:"sink_es_preserve_proto_field_names_enable",level:2},{value:"<code>SINK_ES_REQUEST_TIMEOUT_MS</code>",id:"sink_es_request_timeout_ms",level:2},{value:"<code>SINK_ES_SHARDS_ACTIVE_WAIT_COUNT</code>",id:"sink_es_shards_active_wait_count",level:2},{value:"<code>SINK_ES_RETRY_STATUS_CODE_BLACKLIST</code>",id:"sink_es_retry_status_code_blacklist",level:2},{value:"<code>SINK_ES_ROUTING_KEY_NAME</code>",id:"sink_es_routing_key_name",level:2}],d={toc:c};function _(e){var t=e.components,n=(0,l.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"elasticsearch-sink"},"ElasticSearch Sink"),(0,a.kt)("p",null,"An ES sink Firehose ","(",(0,a.kt)("inlineCode",{parentName:"p"},"SINK_TYPE"),"=",(0,a.kt)("inlineCode",{parentName:"p"},"elasticsearch"),")"," requires the following variables to be set along with Generic ones"),(0,a.kt)("h2",{id:"sink_es_connection_urls"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_CONNECTION_URLS")),(0,a.kt)("p",null,"Elastic search connection URL/URLs to connect. Multiple URLs could be given in a comma separated format."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost1:9200")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required"))),(0,a.kt)("h2",{id:"sink_es_index_name"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_INDEX_NAME")),(0,a.kt)("p",null,"The name of the index to which you want to write the documents. If it does not exist, it will be created."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"sample_index")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required"))),(0,a.kt)("h2",{id:"sink_es_type_name"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_TYPE_NAME")),(0,a.kt)("p",null,"Defines the type name of the Document in Elasticsearch."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"Customer")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required"))),(0,a.kt)("h2",{id:"sink_es_id_field"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_ID_FIELD")),(0,a.kt)("p",null,"The identifier field of the document in Elasticsearch. This should be the key of the field present in the message ","(","JSON or Protobuf",")"," and it has to be a unique, non-null field. So the value of this field in the message will be used as the ID of the document in Elasticsearch while writing the document."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"customer_id")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required"))),(0,a.kt)("h2",{id:"sink_es_mode_update_only_enable"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_MODE_UPDATE_ONLY_ENABLE")),(0,a.kt)("p",null,"Elasticsearch sink can be created in 2 modes: ",(0,a.kt)("inlineCode",{parentName:"p"},"Upsert mode")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateOnly mode"),". If this config is set:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRUE"),": Firehose will run on UpdateOnly mode which will only UPDATE the already existing documents in the Elasticsearch index."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FALSE"),": Firehose will run on Upsert mode, UPDATING the existing documents and also INSERTING any new ones.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"TRUE")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"FALSE"))))),(0,a.kt)("h2",{id:"sink_es_input_message_type"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_INPUT_MESSAGE_TYPE")),(0,a.kt)("p",null,"Indicates if the Kafka topic contains JSON or Protocol Buffer messages."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"PROTOBUF")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"JSON"))),(0,a.kt)("h2",{id:"sink_es_preserve_proto_field_names_enable"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_PRESERVE_PROTO_FIELD_NAMES_ENABLE")),(0,a.kt)("p",null,"Whether or not the protobuf field names should be preserved in the Elasticsearch document. If false the fields will be converted to camel case."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"FALSE")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"TRUE"))),(0,a.kt)("h2",{id:"sink_es_request_timeout_ms"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_REQUEST_TIMEOUT_MS")),(0,a.kt)("p",null,"Defines the request timeout of the elastic search endpoint. The value specified is in milliseconds."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"60000")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"60000"))),(0,a.kt)("h2",{id:"sink_es_shards_active_wait_count"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_SHARDS_ACTIVE_WAIT_COUNT")),(0,a.kt)("p",null,"Defines the number of shard copies that must be active before proceeding with the operation. This can be set to any non-negative value less than or equal to the total number of shard copies ","(","number of replicas + 1",")","."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"1")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"1"))),(0,a.kt)("h2",{id:"sink_es_retry_status_code_blacklist"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_RETRY_STATUS_CODE_BLACKLIST")),(0,a.kt)("p",null,"List of comma-separated status codes for which Firehose should not retry in case of UPDATE ONLY mode is TRUE"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"404,400")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"optional"))),(0,a.kt)("h2",{id:"sink_es_routing_key_name"},(0,a.kt)("inlineCode",{parentName:"h2"},"SINK_ES_ROUTING_KEY_NAME")),(0,a.kt)("p",null,"Defines the proto field whose value will be used for routing documents to a particular shard in Elasticsearch. If empty, Elasticsearch uses the ID field of the doc by default."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example value: ",(0,a.kt)("inlineCode",{parentName:"li"},"service_type")),(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"optional"))))}_.isMDXComponent=!0}}]);