"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[596],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),d=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return i.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),f=r,m=u["".concat(p,".").concat(f)]||u[f]||c[f]||o;return t?i.createElement(m,a(a({ref:n},l),{},{components:t})):i.createElement(m,a({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4780:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],s={},p="Redis Sink",d={unversionedId:"sinks/redis-sink",id:"sinks/redis-sink",title:"Redis Sink",description:"Redis Sink is implemented in Firehose using the Redis sink connector implementation in ODPF Depot. You can check out ODPF Depot Github repository here.",source:"@site/docs/sinks/redis-sink.md",sourceDirName:"sinks",slug:"/sinks/redis-sink",permalink:"/firehose/sinks/redis-sink",draft:!1,editUrl:"https://github.com/odpf/firehose/edit/master/docs/docs/sinks/redis-sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"MongoDB",permalink:"/firehose/sinks/mongo-sink"},next:{title:"Elasticsearch",permalink:"/firehose/sinks/elasticsearch-sink"}},l={},c=[{value:"Data Types",id:"data-types",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Deployment Types",id:"deployment-types",level:3}],u={toc:c};function f(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"redis-sink"},"Redis Sink"),(0,o.kt)("p",null,"Redis Sink is implemented in Firehose using the Redis sink connector implementation in ODPF Depot. You can check out ODPF Depot Github repository ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/odpf/depot"},"here"),"."),(0,o.kt)("h3",{id:"data-types"},"Data Types"),(0,o.kt)("p",null,"Redis sink can be created in 3 different modes based on the value of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/odpf/depot/blob/main/docs/reference/configuration/redis.md#sink_redis_data_type"},(0,o.kt)("inlineCode",{parentName:"a"},"SINK_REDIS_DATA_TYPE")),": HashSet, KeyValue or List"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Hashset"),": For each message, an entry of the format ",(0,o.kt)("inlineCode",{parentName:"li"},"key : field : value")," is generated and pushed to Redis. Field and value are generated on the basis of the config ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/odpf/depot/blob/main/docs/reference/configuration/redis.md#sink_redis_hashset_field_to_column_mapping"},(0,o.kt)("inlineCode",{parentName:"a"},"SINK_REDIS_HASHSET_FIELD_TO_COLUMN_MAPPING"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"List"),": For each message entry of the format ",(0,o.kt)("inlineCode",{parentName:"li"},"key : value")," is generated and pushed to Redis. Value is fetched for the Proto field name provided in the config ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/odpf/depot/blob/main/docs/reference/configuration/redis.md#sink_redis_list_data_field_name"},(0,o.kt)("inlineCode",{parentName:"a"},"SINK_REDIS_LIST_DATA_FIELD_NAME"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"KeyValue"),": For each message entry of the format ",(0,o.kt)("inlineCode",{parentName:"li"},"key : value")," is generated and pushed to Redis. Value is fetched for the proto field name provided in the config ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/odpf/depot/blob/main/docs/reference/configuration/redis.md#sink_redis_key_value_data_field_name"},(0,o.kt)("inlineCode",{parentName:"a"},"SINK_REDIS_KEY_VALUE_DATA_FIELD_NAME")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," is picked up from a field in the message itself."),(0,o.kt)("p",null,"Limitation: Depot Redis sink only supports Key-Value, HashSet and List entries as of now."),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"For Redis sink in Firehose we need to set first (",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_TYPE"),"=",(0,o.kt)("inlineCode",{parentName:"p"},"redis"),"). There are some generic configs which are common across different sink types which need to be set which are mentioned in ",(0,o.kt)("a",{parentName:"p",href:"/firehose/advance/generic"},"generic.md"),". Redis sink specific configs are mentioned in ODPF Depot repository. You can check out the Redis Sink configs ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/odpf/depot/blob/main/docs/reference/configuration/redis.md"},"here")),(0,o.kt)("h3",{id:"deployment-types"},"Deployment Types"),(0,o.kt)("p",null,"Redis sink, as of now, supports two different Deployment Types ",(0,o.kt)("inlineCode",{parentName:"p"},"Standalone")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Cluster"),". This can be configured in the Depot environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_REDIS_DEPLOYMENT_TYPE"),"."))}f.isMDXComponent=!0}}]);